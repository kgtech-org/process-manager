# Production Docker Compose configuration
# This file is generated for production deployments using the Docker Hub images

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: process-manager-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: process_manager
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - process-manager
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/process_manager --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Mongo Express - MongoDB Admin UI
  mongo-express:
    image: mongo-express:latest
    container_name: process-manager-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - process-manager

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: process-manager-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - process-manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: process-manager-minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - process-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Go Backend API
  backend:
    image: kodesonik/process-manager-backend:latest
    container_name: process-manager-backend
    restart: always
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/process_manager?authSource=admin
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - UPLOAD_BASE_URL=${UPLOAD_BASE_URL:-http://localhost/files}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-process-documents}
      - MINIO_USE_SSL=false
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-465}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE:-false}
      - FIREBASE_SERVICE_ACCOUNT_PATH=/app/serviceAccountKey.json
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend/templates:/app/templates:ro
      - ./backend/serviceAccountKey.json:/app/serviceAccountKey.json:ro
    networks:
      - process-manager
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    image: kodesonik/process-manager-frontend:latest
    container_name: process-manager-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Process Manager}
      - NEXT_PUBLIC_FIREBASE_VAPID_KEY=${NEXT_PUBLIC_FIREBASE_VAPID_KEY}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-super-secret-nextauth-key}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - process-manager
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: process-manager-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - process-manager

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  process-manager:
    driver: bridge
